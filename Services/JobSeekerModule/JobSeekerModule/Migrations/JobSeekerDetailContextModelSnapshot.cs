// <auto-generated />
using System;
using JobSeeker.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace JobSeekerModule.Migrations
{
    [DbContext(typeof(JobSeekerDetailContext))]
    partial class JobSeekerDetailContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.14")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("JobSeeker.Models.ExperienceModel", b =>
                {
                    b.Property<int>("experienceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("companyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("companyUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("designation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("endDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("jobDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("jobSeekerEmail")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("startDate")
                        .HasColumnType("datetime2");

                    b.HasKey("experienceId");

                    b.HasIndex("jobSeekerEmail");

                    b.ToTable("Experiences");
                });

            modelBuilder.Entity("JobSeeker.Models.JobSeekerDetailModel", b =>
                {
                    b.Property<string>("email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<long>("expectedSalary")
                        .HasColumnType("bigint");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("jobSeekerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("totalWorkExpericence")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("email");

                    b.HasIndex("email")
                        .IsUnique();

                    b.ToTable("JobSeekerDetails");
                });

            modelBuilder.Entity("JobSeeker.Models.QualificationsModel", b =>
                {
                    b.Property<int>("qualificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("grade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("jobSeekerEmail")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("qualificationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("university")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("yearOfCompletion")
                        .HasColumnType("int");

                    b.HasKey("qualificationId");

                    b.HasIndex("jobSeekerEmail");

                    b.ToTable("Qualifications");
                });

            modelBuilder.Entity("JobSeeker.Models.ExperienceModel", b =>
                {
                    b.HasOne("JobSeeker.Models.JobSeekerDetailModel", "jobSeekerDetail")
                        .WithMany("Experiences")
                        .HasForeignKey("jobSeekerEmail");

                    b.Navigation("jobSeekerDetail");
                });

            modelBuilder.Entity("JobSeeker.Models.QualificationsModel", b =>
                {
                    b.HasOne("JobSeeker.Models.JobSeekerDetailModel", "jobSeekerDetail")
                        .WithMany("Qualifications")
                        .HasForeignKey("jobSeekerEmail");

                    b.Navigation("jobSeekerDetail");
                });

            modelBuilder.Entity("JobSeeker.Models.JobSeekerDetailModel", b =>
                {
                    b.Navigation("Experiences");

                    b.Navigation("Qualifications");
                });
#pragma warning restore 612, 618
        }
    }
}
